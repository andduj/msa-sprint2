plugins {
    id("org.springframework.boot") version "3.2.5"
    id("io.spring.dependency-management") version "1.1.3"
    id("java")
    id("com.google.protobuf") version "0.9.4"
}

group = "com.hotelio"
version = "1.0.0"
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("io.grpc:grpc-netty-shaded:1.64.0")
    implementation("io.grpc:grpc-protobuf:1.64.0")
    implementation("io.grpc:grpc-stub:1.64.0")
    implementation("com.google.protobuf:protobuf-java:3.25.3")
    
    // Добавляем зависимость для javax.annotation.Generated
    implementation("javax.annotation:javax.annotation-api:1.3.2")
    
    // Добавляем H2 для тестирования
    runtimeOnly("com.h2database:h2")

    runtimeOnly("org.postgresql:postgresql")

    implementation files('libs/p-o-y-1.0.0.jar')
}

protobuf {
    protoc {
        // Принудительно используем системный protoc
        path = 'protoc'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.64.0"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    // Добавляем настройки для Windows
    generatedFilesBaseDir = "$projectDir/src/generated"
}

// Добавляем задачу для очистки сгенерированных файлов
tasks.register('cleanGenerated') {
    doLast {
        delete "$projectDir/src/generated"
    }
}

tasks.named('clean') {
    dependsOn('cleanGenerated')
}

// Добавляем настройки для Windows
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Принудительно используем системный protoc
tasks.withType(com.google.protobuf.gradle.GenerateProtoTask).configureEach {
    doFirst {
        // Устанавливаем переменную окружения для поиска плагина
        def protocPath = "C:\\Users\\Пользователь\\AppData\\Local\\Microsoft\\WinGet\\Packages\\Google.Protobuf_Microsoft.Winget.Source_8wekyb3d8bbwe\\bin"
        def currentPath = System.getenv('PATH')
        if (!currentPath.contains(protocPath)) {
            System.setProperty('PATH', "$currentPath;$protocPath")
        }
        
        // Принудительно используем системный protoc
        System.setProperty('protoc.path', 'protoc')
        System.setProperty('protoc.grpc.plugin.path', 'protoc-gen-grpc.exe')
    }
}


