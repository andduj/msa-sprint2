plugins {
    id("org.springframework.boot") version "3.2.5"
    id("io.spring.dependency-management") version "1.1.3"
    id("java")
    id("com.google.protobuf") version "0.9.4"
}

group = "com.hotelio"
version = "1.0.0"
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.kafka:spring-kafka")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    
    // gRPC dependencies
    implementation("io.grpc:grpc-netty-shaded:1.64.0")
    implementation("io.grpc:grpc-protobuf:1.64.0")
    implementation("io.grpc:grpc-stub:1.64.0")
    implementation("com.google.protobuf:protobuf-java:3.25.3")
    
    // gRPC Spring Boot
    implementation("net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE")
    
    // javax.annotation for Generated annotation
    implementation("javax.annotation:javax.annotation-api:1.3.2")
    
    runtimeOnly("org.postgresql:postgresql")
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.3"
        // Используем локальный protoc
        path = file("tools/bin/protoc.exe").absolutePath
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.64.0"
            // Используем локальный protoc-gen-grpc-java
            path = file("tools/protoc-gen-grpc-java.exe").absolutePath
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    // Добавляем настройки для Windows
    generatedFilesBaseDir = "$projectDir/src/generated"
}

// Конфигурация для создания исполняемого JAR
bootJar {
    archiveBaseName = 'booking-service'
    archiveVersion = '1.0.0'
    archiveClassifier = ''
}

jar {
    enabled = false
}

// Добавляем задачу для очистки сгенерированных файлов
tasks.register('cleanGenerated') {
    doLast {
        delete "$projectDir/src/generated"
    }
}

tasks.named('clean') {
    dependsOn('cleanGenerated')
} 